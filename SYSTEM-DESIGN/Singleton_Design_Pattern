https://codepumpkin.com/singleton-design-pattern/#eagerInitialization
[classes and its relation, class diagrams & Sequence flow]

1)Eager Initialization - init of instance is done at the time class loading, instance will get created and remain in memory
which is a waste of memory.
2)Static Block Initialization - similar to eager initialization , except that init of instance is done in a static block,
with try , catch for exception handling.
3)Lazy Initialization - instance is created when we call getInstance , but Not thread safe

public class Singleton {
private static Singleton instance = null;

private Singleton() { //constuctor
//do nothing here
}


public static Singleton synchronized getInstance() {
  if(instance == null) {
    instance = new Singleton();
  }
  return instance;
}


try {

throws();

} catch(Exception e) {

} finally() {

}

//https://www.geeksforgeeks.org/throw-throws-java/


